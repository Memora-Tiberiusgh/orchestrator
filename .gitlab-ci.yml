stages:
 - deploy

deploy:
 stage: deploy
 image: docker:20.10.16
 before_script:
 - apk add --no-cache openssh-client git
 - mkdir -p ~/.ssh
 - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
 - chmod 600 ~/.ssh/id_rsa
 - eval $(ssh-agent -s)
 - ssh-add ~/.ssh/id_rsa
 - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
 script:
 - |
   ssh $SSH_USER@$SSH_HOST "
   cd /var/www/html/memora
   
   # Setup SSH for Git on the remote server
   mkdir -p ~/.ssh
   echo -e 'Host gitlab.com\n\tStrictHostKeyChecking no\n' >> ~/.ssh/config
   
   # Pull orchestrating repo
   echo 'Updating docker-compose-config...'
   cd /var/www/html/memora/docker-compose-config
   if [ -d .git ]; then
     git pull
   else
     echo 'Not a git repository. Skipping pull.'
   fi
   
   # Pull backend repo
   echo 'Updating memora_back_end...'
   cd /var/www/html/memora/memora_back_end
   if [ -d .git ]; then
     git pull
   else
     echo 'Not a git repository. Skipping pull.'
   fi
   
   # Pull frontend repo
   echo 'Updating memora_front_end...'
   cd /var/www/html/memora/memora_front_end
   if [ -d .git ]; then
     git pull
   else
     echo 'Not a git repository. Skipping pull.'
   fi
   
   # Navigate to orchestration directory and run docker compose
   echo 'Starting application with docker compose...'
   cd /var/www/html/memora/docker-compose-config
   
   # Use the dev compose file
   if [ -f compose.dev.yaml ]; then
     echo 'Using compose.dev.yaml'
     docker compose -f compose.dev.yaml up -d --build
   else
     echo 'ERROR: compose.dev.yaml not found!'
     ls -la
   fi
   
   # Print confirmation message
   echo 'Deployment completed!'
   "
 only:
 - main